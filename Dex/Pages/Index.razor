@page "/"
@inject PokeClient client
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="pokemon-row">
        @foreach (var p in pokemonList)
        {
            <a href="/pokemon/@p.id">
                <div class="pokemon-card">
                    <img src="@p.sprites.front_default" alt="">
                    <h4 class="pokemon-name">@p.name</h4>
                    <div class="type-row">
                        @foreach (var type in p.types)
                        {
                            <span class="badge-type inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 " style="background-color: @PokeColor.GetTypeColor(@type.type.name);">@type.type.name</span>
                        }
                    </div>
                </div>
            </a>
        }
    </div>

    @if (isLoading)
    {
        <div class="loader">
            <div class="m-8 bg-white">
                <div class="flex justify-center items-center h-full">
                    <img class="h-7 w-7" src="https://icons8.com/preloaders/preloaders/1488/Iphone-spinner-2.gif" alt="">
                </div>
            </div>
        </div>
    }

    <div id="scroll-marker"></div>
</div>

@code {
    List<Pokemon> pokemonList = new List<Pokemon>();
    int limit = 15; // Nombre de Pokémon à charger à chaque fois
    int offset = 0; // Point de départ pour la pagination
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
        await LoadMoreData();
    }

    private async Task LoadMoreData()
    {
        isLoading = true;
        var additionalPokemon = await client.FetchKantoPokemonAsync(limit, offset);
        if (additionalPokemon != null && additionalPokemon.Count > 0)
        {
            pokemonList.AddRange(additionalPokemon);
            offset += limit;
            StateHasChanged();
        }
        isLoading = false;
    }

    [JSInvokable("LoadMore")]
    public async Task LoadMore()
    {
        await LoadMoreData();
    }
}